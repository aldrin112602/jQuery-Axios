////////////////////
////////////////////
///JQUERY + AXIOS///
////////////////////
////////////////////

/* JQUERY + AXIOS fully customized by Aldrin Caballero */

let isReady = false
class Axios {
  get(url) {
    return new Promise((resolve, reject) => {
      var xhr = new XMLHttpRequest()
      xhr.open('GET', url)
      const headers = () => {
        var headers = xhr.getAllResponseHeaders()
        var arr = headers.trim().split(/[\r\n]+/)
        var headerMap = {}
        arr.forEach(line => {
          var parts = line.split(': ')
          var header = parts.shift()
          var value = parts.join(': ')
          headerMap[header] = value
        })
        return headerMap
      }
      const loadData = () => {
        return Object.freeze({
          data: xhr.response,
          status: xhr.status,
          statusText: xhr.statusText,
          'request-type': 'XMLHttpRequest',
          headers: headers()
        })
      }
      xhr.onload = () => resolve(loadData())
      
      xhr.onerror = () => reject(loadData())
      
      xhr.send(null)
    })
  }

  post(url, data) {
    return new Promise((resolve, reject) => {
      let _data;
      if (typeof data == 'string') {
        let arr = data.split('')
        if (arr[0] == '.' || arr[0] == '#' || data.length > 1) {
          _data = $(data).serialize()
        }
      }
      else if (data == '[object Object]') {
        let url = new URLSearchParams()
        for (var [k, v] of Object.entries(data)) {
          url.append(k, v)
        }
        _data = url
      } else if (data == '[object FormData]') {
        let _url = new URLSearchParams()
        for (var [k, v] of data.entries()) {
          _url.append(k, v)
        }
        _data = _url
      }

      var xhr = new XMLHttpRequest()
      xhr.open('POST', url, true)
      xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded")
      const headers = () => {
        var headers = xhr.getAllResponseHeaders()
        var arr = headers.trim().split(/[\r\n]+/)
        var headerMap = {}
        arr.forEach(line => {
          var parts = line.split(': ')
          var header = parts.shift()
          var value = parts.join(': ')
          headerMap[header] = value
        })
        return headerMap
      }
      const loadData = () => {
        return Object.freeze({
          data: xhr.response,
          status: xhr.status,
          statusText: xhr.statusText,
          'request-type': 'XMLHttpRequest',
          headers: headers()
        })
      }
      xhr.onload = () => resolve(loadData())
      xhr.onerror = () => reject(loadData())
      
      xhr.send(_data)

    })

  }
}

const $ = (selector) => {
  const $ = (element) => {
    return (element == document || element == this) ? element : document.querySelectorAll(element)
  }
  class Ready {
    ready(callback) {
      if (typeof callback == 'function' && selector == document) {
        selector.addEventListener('DOMContentLoaded', () => {
          isReady = true
          callback()
        })
      }
    }

  }

  class Main {
    hide(callback) {
      $(selector).forEach(el => el.style.display = 'none');
      if (typeof callback == 'function') {
        callback()
      }
    }

    show(callback) {
      $(selector).forEach(el => el.style.display = 'block')
      if (typeof callback == 'function') {
        callback()
      }
    }

    click(callback) {
      if(typeof callback == 'function') {
        $(selector).forEach(el => el.onclick = callback)
      } else {
        document.querySelector(selector).click();
        
      }
    } 

    dblclick(callback) {
      $(selector).forEach(el => el.ondblclick = callback)
    }

    mouseenter(callback) {
      $(selector).forEach(el => el.onmouseenter = callback)
    }

    mouseleave(callback) {
      $(selector).forEach(el => el.onmouseleave = callback)
    }

    mouseup(callback) {
      $(selector).forEach(el => el.onmouseup = callback)
    }

    mousedown(callback) {
      $(selector).forEach(el => el.onmousedown = callback)
    }

    hover(mouseEnter, mouseLeave) {
      this.mouseenter(mouseEnter)
      this.mouseleave(mouseLeave)
    }

    focus(callback) {
      $(selector).forEach(el => el.onfocus = callback)
    }

    blur(callback) {
      $(selector).forEach(el => el.onblur = callback)
    }

    on(event, callback) {
      if (arguments.length == 1 && typeof arguments[0] == 'object') {
        for (const [key, func] of Object.entries(arguments[0])) {
          $(selector).forEach(el => el.addEventListener(key, func))
        }
      } else {
        $(selector).forEach(el => el.addEventListener(event, callback))
      }
    }

    bind(event, callback) {
      if (arguments.length == 1 && typeof arguments[0] == 'object') {
        for (const [key, func] of Object.entries(arguments[0])) {
          $(selector).forEach(el => el.addEventListener(key, func))
        }
      } else {
        $(selector).forEach(el => el.addEventListener(event, callback))
      }
    }

    live(event, callback) {
      if (arguments.length == 1 && typeof arguments[0] == 'object') {
        for (const [key, func] of Object.entries(arguments[0])) {
          $(selector).forEach(el => el.addEventListener(key, func))
        }
      } else {
        $(selector).forEach(el => el.addEventListener(event, callback))
      }
    }

    change(callback) {
      $(selector).forEach(el => el.onchange = callback)
    }

    val(value) {
      if (arguments.length > 0) {
        document.querySelector(selector).value = value
      }
      return document.querySelector(selector).value
    }
    text(text) {
      if (typeof text == 'string') {
        document.querySelector(selector).innerText = text
      }
      return document.querySelector(selector).innerText
    }

    html(string) {
      if (typeof string == 'string') {
        document.querySelector(selector).innerHTML = string
      }
      return document.querySelector(selector).innerHTML
    }

    focusin(callback) {
      $(selector).forEach(e => e.onfocusin = callback)
    }

    focusout(callback) {
      $(selector).forEach(e => e.onfocusout = callback)
    }
    keydown(callback) {
      $(selector).forEach(e => e.onkeydown = callback)
    }
    keypress(callback) {
      $(selector).forEach(e => e.onkeypress = callback)
    }
    keyup(callback) {
      $(selector).forEach(e => e.onkeyup = callback)
    }
    serialize() {
      var formData = new FormData(document.querySelector(selector));
      var url = new URLSearchParams();
      for (var [key, value] of formData.entries()) {
        url.append(key, value)
      }
      return url
    }
    submit(callback) {
      document.querySelector(selector).addEventListener('submit', callback)
    }
    toFormData() {
      return new FormData(document.querySelector(selector))
    }
  }
  return (!isReady) ? new Ready() : new Main()
}
